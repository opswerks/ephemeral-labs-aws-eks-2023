name: training-labs
runtime: yaml
description: Data Lab Training Modules

variables:
  jupyter-label:
    module: jupyter
  team-prefix: data
  training-suffix: lab
  oauth-org: opswerks
  oauth-credentials:
    fn::fromBase64: dmF1bHRzLzRkYmtseDR2eHZzaGRqYXVjcHI3enJlZm1pL2l0ZW1zL3g2cnc3djI2eHB2bmtqcmFwZXhma2NheDM0
  oauth-secret: github-oauth
  training-ecr-credentials:
    fn::invoke:
      function: aws:ecr/getAuthorizationToken:getAuthorizationToken
      arguments:
        registryId: ${account-id}
  training-ssl:
    fn::invoke:
      function: aws:acm:getCertificate
      arguments:
        domain: "*.sandbox.opswerks.net"
        types:
          - AMAZON_ISSUED
        statuses:
          - ISSUED
  training-dns:
    fn::invoke:
      function: aws:route53:getZone
      arguments:
        name: training.opswerks.net
  training-ecr-dockerconfigjson:
    fn::toBase64: "{\"auths\":{\"${account-id}.dkr.ecr.us-west-2.amazonaws.com/${image-repo}\":{\"username\":\"${training-ecr-credentials.userName}\",\"password\":\"${training-ecr-credentials.password}\"}}}"

resources:
  docker-pull-secret:
    type: kubernetes:core/v1:Secret
    properties:
      metadata:
        name: regcred
        namespace: ${namespaces[0]}
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: ${training-ecr-dockerconfigjson}
  jupyter-module:
    type: kubernetes:helm.sh/v3:Release
    properties:
      chart: jupyterhub
      name: jupyter-module
      namespace: ${namespaces[0]}
      repositoryOpts:
        repo: https://jupyterhub.github.io/helm-chart/
      version: 2.0.0
      skipAwait: true
      values:
        hub:
          annotations:
            operator.1password.io/item-path: ${oauth-credentials}
            operator.1password.io/item-name: ${oauth-secret}
          config:
            JupyterHub:
              cleanup_servers: True
              cleanup_proxy: True
              concurrent_spawn_limit: 5
          extraEnv:
            - name: OAUTH_CALLBACK_URL
              value: https://${team-prefix}-jupyter-${training-suffix}.${training-dns.name}/hub/oauth_callback
            - name: GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: ${oauth-secret}
                  key: username
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: ${oauth-secret}
                  key: password
          extraConfig:
            auth.py: |
              c.JupyterHub.authenticator_class = 'github'
              c.GitHubOAuthenticator.client_id = os.environ['GITHUB_CLIENT_ID']
              c.GitHubOAuthenticator.client_secret = os.environ['GITHUB_CLIENT_SECRET']
              c.GitHubOAuthenticator.oauth_callback_url = os.environ['OAUTH_CALLBACK_URL']
              c.GitHubOAuthenticator.allowed_organizations = ['${oauth-org}']
              c.GitHubOAuthenticator.scope = ['read:org']
        singleuser:
          image:
            name: ${account-id}.dkr.ecr.us-west-2.amazonaws.com/${image-repo}
            tag: 1.0.0
            pullSecrets:
              - regcred
        prePuller:
          hook:
            enabled: false
        proxy:
          service:
            type: NodePort
  jupyter-ingress:
    type: kubernetes:networking.k8s.io/v1:Ingress
    properties:
      metadata:
        name: jupyter-ingress
        namespace: ${namespaces[0]}
        annotations:
          kubernetes.io/ingress.class: "alb"
          alb.ingress.kubernetes.io/scheme: internet-facing
          alb.ingress.kubernetes.io/target-type: ip
          alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
          alb.ingress.kubernetes.io/certificate-arn: ${training-ssl.arn}
      spec:
        rules:
          - http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: proxy-public
                      port:
                        number: 80
  jupyter-fqdn:
    type: aws:route53:Record
    properties:
      zoneId: ${training-dns.zoneId}
      name: ${team-prefix}-jupyter-${training-suffix}.${training-dns.name}
      type: CNAME
      ttl: 300
      records:
        - ${jupyter-ingress.status.loadBalancer.ingress[0].hostname}

outputs:
  training-ecr-user: ${training-ecr-credentials.userName}
  training-ecr-pass: ${training-ecr-credentials.password}
  docker-secret-data: ${training-ecr-dockerconfigjson}
  jupyter-module-fqdn: ${jupyter-fqdn.fqdn}